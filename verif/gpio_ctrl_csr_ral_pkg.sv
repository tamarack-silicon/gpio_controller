
// This file was autogenerated by PeakRDL-uvm
package gpio_ctrl_csr_ral_pkg;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - gpio_ctrl_csr::output_data_r
    class gpio_ctrl_csr__output_data_r extends uvm_reg;
        rand uvm_reg_field odata;

        function new(string name = "gpio_ctrl_csr__output_data_r");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.odata = new("odata");
            this.odata.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : gpio_ctrl_csr__output_data_r

    // Reg - gpio_ctrl_csr::output_enable_r
    class gpio_ctrl_csr__output_enable_r extends uvm_reg;
        rand uvm_reg_field oenable;

        function new(string name = "gpio_ctrl_csr__output_enable_r");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.oenable = new("oenable");
            this.oenable.configure(this, 32, 0, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : gpio_ctrl_csr__output_enable_r

    // Reg - gpio_ctrl_csr::input_data_r
    class gpio_ctrl_csr__input_data_r extends uvm_reg;
        rand uvm_reg_field idata;

        function new(string name = "gpio_ctrl_csr__input_data_r");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.idata = new("idata");
            this.idata.configure(this, 32, 0, "RO", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : gpio_ctrl_csr__input_data_r

    // Reg - gpio_ctrl_csr::posedge_intr_enable_r
    class gpio_ctrl_csr__posedge_intr_enable_r extends uvm_reg;
        rand uvm_reg_field intr_enable;

        function new(string name = "gpio_ctrl_csr__posedge_intr_enable_r");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.intr_enable = new("intr_enable");
            this.intr_enable.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : gpio_ctrl_csr__posedge_intr_enable_r

    // Reg - gpio_ctrl_csr::negedge_intr_enable_r
    class gpio_ctrl_csr__negedge_intr_enable_r extends uvm_reg;
        rand uvm_reg_field intr_enable;

        function new(string name = "gpio_ctrl_csr__negedge_intr_enable_r");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.intr_enable = new("intr_enable");
            this.intr_enable.configure(this, 32, 0, "RW", 0, 'h0, 0, 1, 0);
        endfunction : build
    endclass : gpio_ctrl_csr__negedge_intr_enable_r

    // Reg - gpio_ctrl_csr::intr_status_r
    class gpio_ctrl_csr__intr_status_r extends uvm_reg;
        rand uvm_reg_field posedge_0;
        rand uvm_reg_field posedge_1;
        rand uvm_reg_field posedge_2;
        rand uvm_reg_field posedge_3;
        rand uvm_reg_field posedge_4;
        rand uvm_reg_field posedge_5;
        rand uvm_reg_field posedge_6;
        rand uvm_reg_field posedge_7;
        rand uvm_reg_field negedge_0;
        rand uvm_reg_field negedge_1;
        rand uvm_reg_field negedge_2;
        rand uvm_reg_field negedge_3;
        rand uvm_reg_field negedge_4;
        rand uvm_reg_field negedge_5;
        rand uvm_reg_field negedge_6;
        rand uvm_reg_field negedge_7;

        function new(string name = "gpio_ctrl_csr__intr_status_r");
            super.new(name, 32, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.posedge_0 = new("posedge_0");
            this.posedge_0.configure(this, 1, 0, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_1 = new("posedge_1");
            this.posedge_1.configure(this, 1, 1, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_2 = new("posedge_2");
            this.posedge_2.configure(this, 1, 2, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_3 = new("posedge_3");
            this.posedge_3.configure(this, 1, 3, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_4 = new("posedge_4");
            this.posedge_4.configure(this, 1, 4, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_5 = new("posedge_5");
            this.posedge_5.configure(this, 1, 5, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_6 = new("posedge_6");
            this.posedge_6.configure(this, 1, 6, "W1C", 1, 'h0, 0, 1, 0);
            this.posedge_7 = new("posedge_7");
            this.posedge_7.configure(this, 1, 7, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_0 = new("negedge_0");
            this.negedge_0.configure(this, 1, 8, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_1 = new("negedge_1");
            this.negedge_1.configure(this, 1, 9, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_2 = new("negedge_2");
            this.negedge_2.configure(this, 1, 10, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_3 = new("negedge_3");
            this.negedge_3.configure(this, 1, 11, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_4 = new("negedge_4");
            this.negedge_4.configure(this, 1, 12, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_5 = new("negedge_5");
            this.negedge_5.configure(this, 1, 13, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_6 = new("negedge_6");
            this.negedge_6.configure(this, 1, 14, "W1C", 1, 'h0, 0, 1, 0);
            this.negedge_7 = new("negedge_7");
            this.negedge_7.configure(this, 1, 15, "W1C", 1, 'h0, 0, 1, 0);
        endfunction : build
    endclass : gpio_ctrl_csr__intr_status_r

    // Addrmap - gpio_ctrl_csr
    class gpio_ctrl_csr extends uvm_reg_block;
        rand gpio_ctrl_csr__output_data_r output_data[8];
        rand gpio_ctrl_csr__output_enable_r output_enable[8];
        rand gpio_ctrl_csr__input_data_r input_data[8];
        rand gpio_ctrl_csr__posedge_intr_enable_r posedge_intr_enable[8];
        rand gpio_ctrl_csr__negedge_intr_enable_r negedge_intr_enable[8];
        rand gpio_ctrl_csr__intr_status_r intr_status;

        function new(string name = "gpio_ctrl_csr");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 4, UVM_NO_ENDIAN);
            foreach(this.output_data[i0]) begin
                this.output_data[i0] = new($sformatf("output_data[%0d]", i0));
                this.output_data[i0].configure(this);
                
                this.output_data[i0].build();
                this.default_map.add_reg(this.output_data[i0], 'h0 + i0*'h4);
            end
            foreach(this.output_enable[i0]) begin
                this.output_enable[i0] = new($sformatf("output_enable[%0d]", i0));
                this.output_enable[i0].configure(this);
                
                this.output_enable[i0].build();
                this.default_map.add_reg(this.output_enable[i0], 'h100 + i0*'h4);
            end
            foreach(this.input_data[i0]) begin
                this.input_data[i0] = new($sformatf("input_data[%0d]", i0));
                this.input_data[i0].configure(this);
                
                this.input_data[i0].build();
                this.default_map.add_reg(this.input_data[i0], 'h200 + i0*'h4);
            end
            foreach(this.posedge_intr_enable[i0]) begin
                this.posedge_intr_enable[i0] = new($sformatf("posedge_intr_enable[%0d]", i0));
                this.posedge_intr_enable[i0].configure(this);
                
                this.posedge_intr_enable[i0].build();
                this.default_map.add_reg(this.posedge_intr_enable[i0], 'h300 + i0*'h4);
            end
            foreach(this.negedge_intr_enable[i0]) begin
                this.negedge_intr_enable[i0] = new($sformatf("negedge_intr_enable[%0d]", i0));
                this.negedge_intr_enable[i0].configure(this);
                
                this.negedge_intr_enable[i0].build();
                this.default_map.add_reg(this.negedge_intr_enable[i0], 'h400 + i0*'h4);
            end
            this.intr_status = new("intr_status");
            this.intr_status.configure(this);

            this.intr_status.build();
            this.default_map.add_reg(this.intr_status, 'h500);
        endfunction : build
    endclass : gpio_ctrl_csr

endpackage: gpio_ctrl_csr_ral_pkg
