// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module gpio_ctrl_csr (
        input wire clk,
        input wire arst_n,

        input wire s_apb_psel,
        input wire s_apb_penable,
        input wire s_apb_pwrite,
        input wire [2:0] s_apb_pprot,
        input wire [10:0] s_apb_paddr,
        input wire [31:0] s_apb_pwdata,
        input wire [3:0] s_apb_pstrb,
        output logic s_apb_pready,
        output logic [31:0] s_apb_prdata,
        output logic s_apb_pslverr,

        input gpio_ctrl_csr_pkg::gpio_ctrl_csr__in_t hwif_in,
        output gpio_ctrl_csr_pkg::gpio_ctrl_csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [10:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    logic is_active;
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            is_active <= '0;
            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            if(~is_active) begin
                if(s_apb_psel) begin
                    is_active <= '1;
                    cpuif_req <= '1;
                    cpuif_req_is_wr <= s_apb_pwrite;
                    cpuif_addr <= {s_apb_paddr[10:2], 2'b0};
                    cpuif_wr_data <= s_apb_pwdata;
                    for(int i=0; i<4; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{s_apb_pstrb[i]}};
                    end
                end
            end else begin
                cpuif_req <= '0;
                if(cpuif_rd_ack || cpuif_wr_ack) begin
                    is_active <= '0;
                end
            end
        end
    end

    // Response
    assign s_apb_pready = cpuif_rd_ack | cpuif_wr_ack;
    assign s_apb_prdata = cpuif_rd_data;
    assign s_apb_pslverr = cpuif_rd_err | cpuif_wr_err;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic output_data[8];
        logic output_enable[8];
        logic input_data[8];
        logic posedge_intr_enable[8];
        logic negedge_intr_enable[8];
        logic intr_status;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.output_data[i0] = cpuif_req_masked & (cpuif_addr == 11'h0 + (11)'(i0) * 11'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.output_enable[i0] = cpuif_req_masked & (cpuif_addr == 11'h100 + (11)'(i0) * 11'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.input_data[i0] = cpuif_req_masked & (cpuif_addr == 11'h200 + (11)'(i0) * 11'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.posedge_intr_enable[i0] = cpuif_req_masked & (cpuif_addr == 11'h300 + (11)'(i0) * 11'h4);
        end
        for(int i0=0; i0<8; i0++) begin
            decoded_reg_strb.negedge_intr_enable[i0] = cpuif_req_masked & (cpuif_addr == 11'h400 + (11)'(i0) * 11'h4);
        end
        decoded_reg_strb.intr_status = cpuif_req_masked & (cpuif_addr == 11'h500);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } odata;
        } output_data[8];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } oenable;
        } output_enable[8];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } intr_enable;
        } posedge_intr_enable[8];
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } intr_enable;
        } negedge_intr_enable[8];
        struct {
            struct {
                logic next;
                logic load_next;
            } posedge_0;
            struct {
                logic next;
                logic load_next;
            } posedge_1;
            struct {
                logic next;
                logic load_next;
            } posedge_2;
            struct {
                logic next;
                logic load_next;
            } posedge_3;
            struct {
                logic next;
                logic load_next;
            } posedge_4;
            struct {
                logic next;
                logic load_next;
            } posedge_5;
            struct {
                logic next;
                logic load_next;
            } posedge_6;
            struct {
                logic next;
                logic load_next;
            } posedge_7;
            struct {
                logic next;
                logic load_next;
            } negedge_0;
            struct {
                logic next;
                logic load_next;
            } negedge_1;
            struct {
                logic next;
                logic load_next;
            } negedge_2;
            struct {
                logic next;
                logic load_next;
            } negedge_3;
            struct {
                logic next;
                logic load_next;
            } negedge_4;
            struct {
                logic next;
                logic load_next;
            } negedge_5;
            struct {
                logic next;
                logic load_next;
            } negedge_6;
            struct {
                logic next;
                logic load_next;
            } negedge_7;
        } intr_status;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [31:0] value;
            } odata;
        } output_data[8];
        struct {
            struct {
                logic [31:0] value;
            } oenable;
        } output_enable[8];
        struct {
            struct {
                logic [31:0] value;
            } intr_enable;
        } posedge_intr_enable[8];
        struct {
            struct {
                logic [31:0] value;
            } intr_enable;
        } negedge_intr_enable[8];
        struct {
            struct {
                logic value;
            } posedge_0;
            struct {
                logic value;
            } posedge_1;
            struct {
                logic value;
            } posedge_2;
            struct {
                logic value;
            } posedge_3;
            struct {
                logic value;
            } posedge_4;
            struct {
                logic value;
            } posedge_5;
            struct {
                logic value;
            } posedge_6;
            struct {
                logic value;
            } posedge_7;
            struct {
                logic value;
            } negedge_0;
            struct {
                logic value;
            } negedge_1;
            struct {
                logic value;
            } negedge_2;
            struct {
                logic value;
            } negedge_3;
            struct {
                logic value;
            } negedge_4;
            struct {
                logic value;
            } negedge_5;
            struct {
                logic value;
            } negedge_6;
            struct {
                logic value;
            } negedge_7;
        } intr_status;
    } field_storage_t;
    field_storage_t field_storage;

    for(genvar i0=0; i0<8; i0++) begin
        // Field: gpio_ctrl_csr.output_data[].odata
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.output_data[i0].odata.value;
            load_next_c = '0;
            if(decoded_reg_strb.output_data[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.output_data[i0].odata.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.output_data[i0].odata.next = next_c;
            field_combo.output_data[i0].odata.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.output_data[i0].odata.value <= 32'h0;
            end else begin
                if(field_combo.output_data[i0].odata.load_next) begin
                    field_storage.output_data[i0].odata.value <= field_combo.output_data[i0].odata.next;
                end
            end
        end
        assign hwif_out.output_data[i0].odata.value = field_storage.output_data[i0].odata.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: gpio_ctrl_csr.output_enable[].oenable
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.output_enable[i0].oenable.value;
            load_next_c = '0;
            if(decoded_reg_strb.output_enable[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.output_enable[i0].oenable.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.output_enable[i0].oenable.next = next_c;
            field_combo.output_enable[i0].oenable.load_next = load_next_c;
        end
        always_ff @(posedge clk or negedge arst_n) begin
            if(~arst_n) begin
                field_storage.output_enable[i0].oenable.value <= 32'h0;
            end else begin
                if(field_combo.output_enable[i0].oenable.load_next) begin
                    field_storage.output_enable[i0].oenable.value <= field_combo.output_enable[i0].oenable.next;
                end
            end
        end
        assign hwif_out.output_enable[i0].oenable.value = field_storage.output_enable[i0].oenable.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: gpio_ctrl_csr.posedge_intr_enable[].intr_enable
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.posedge_intr_enable[i0].intr_enable.value;
            load_next_c = '0;
            if(decoded_reg_strb.posedge_intr_enable[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.posedge_intr_enable[i0].intr_enable.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.posedge_intr_enable[i0].intr_enable.next = next_c;
            field_combo.posedge_intr_enable[i0].intr_enable.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.posedge_intr_enable[i0].intr_enable.load_next) begin
                field_storage.posedge_intr_enable[i0].intr_enable.value <= field_combo.posedge_intr_enable[i0].intr_enable.next;
            end
        end
        assign hwif_out.posedge_intr_enable[i0].intr_enable.value = field_storage.posedge_intr_enable[i0].intr_enable.value;
    end
    for(genvar i0=0; i0<8; i0++) begin
        // Field: gpio_ctrl_csr.negedge_intr_enable[].intr_enable
        always_comb begin
            automatic logic [31:0] next_c;
            automatic logic load_next_c;
            next_c = field_storage.negedge_intr_enable[i0].intr_enable.value;
            load_next_c = '0;
            if(decoded_reg_strb.negedge_intr_enable[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.negedge_intr_enable[i0].intr_enable.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
                load_next_c = '1;
            end
            field_combo.negedge_intr_enable[i0].intr_enable.next = next_c;
            field_combo.negedge_intr_enable[i0].intr_enable.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(field_combo.negedge_intr_enable[i0].intr_enable.load_next) begin
                field_storage.negedge_intr_enable[i0].intr_enable.value <= field_combo.negedge_intr_enable[i0].intr_enable.next;
            end
        end
        assign hwif_out.negedge_intr_enable[i0].intr_enable.value = field_storage.negedge_intr_enable[i0].intr_enable.value;
    end
    // Field: gpio_ctrl_csr.intr_status.posedge_0
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_0.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_0.value & ~(decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_0.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_0.next = next_c;
        field_combo.intr_status.posedge_0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_0.load_next) begin
            field_storage.intr_status.posedge_0.value <= field_combo.intr_status.posedge_0.next;
        end
    end
    assign hwif_out.intr_status.posedge_0.value = field_storage.intr_status.posedge_0.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_1.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_1.value & ~(decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_1.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_1.next = next_c;
        field_combo.intr_status.posedge_1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_1.load_next) begin
            field_storage.intr_status.posedge_1.value <= field_combo.intr_status.posedge_1.next;
        end
    end
    assign hwif_out.intr_status.posedge_1.value = field_storage.intr_status.posedge_1.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_2
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_2.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_2.value & ~(decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_2.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_2.next = next_c;
        field_combo.intr_status.posedge_2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_2.load_next) begin
            field_storage.intr_status.posedge_2.value <= field_combo.intr_status.posedge_2.next;
        end
    end
    assign hwif_out.intr_status.posedge_2.value = field_storage.intr_status.posedge_2.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_3
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_3.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_3.value & ~(decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_3.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_3.next = next_c;
        field_combo.intr_status.posedge_3.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_3.load_next) begin
            field_storage.intr_status.posedge_3.value <= field_combo.intr_status.posedge_3.next;
        end
    end
    assign hwif_out.intr_status.posedge_3.value = field_storage.intr_status.posedge_3.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_4
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_4.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_4.value & ~(decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_4.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_4.next = next_c;
        field_combo.intr_status.posedge_4.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_4.load_next) begin
            field_storage.intr_status.posedge_4.value <= field_combo.intr_status.posedge_4.next;
        end
    end
    assign hwif_out.intr_status.posedge_4.value = field_storage.intr_status.posedge_4.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_5
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_5.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_5.value & ~(decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_5.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_5.next = next_c;
        field_combo.intr_status.posedge_5.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_5.load_next) begin
            field_storage.intr_status.posedge_5.value <= field_combo.intr_status.posedge_5.next;
        end
    end
    assign hwif_out.intr_status.posedge_5.value = field_storage.intr_status.posedge_5.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_6
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_6.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_6.value & ~(decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_6.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_6.next = next_c;
        field_combo.intr_status.posedge_6.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_6.load_next) begin
            field_storage.intr_status.posedge_6.value <= field_combo.intr_status.posedge_6.next;
        end
    end
    assign hwif_out.intr_status.posedge_6.value = field_storage.intr_status.posedge_6.value;
    // Field: gpio_ctrl_csr.intr_status.posedge_7
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.posedge_7.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.posedge_7.value & ~(decoded_wr_data[7:7] & decoded_wr_biten[7:7]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.posedge_7.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.posedge_7.next = next_c;
        field_combo.intr_status.posedge_7.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.posedge_7.load_next) begin
            field_storage.intr_status.posedge_7.value <= field_combo.intr_status.posedge_7.next;
        end
    end
    assign hwif_out.intr_status.posedge_7.value = field_storage.intr_status.posedge_7.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_0
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_0.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_0.value & ~(decoded_wr_data[8:8] & decoded_wr_biten[8:8]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_0.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_0.next = next_c;
        field_combo.intr_status.negedge_0.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_0.load_next) begin
            field_storage.intr_status.negedge_0.value <= field_combo.intr_status.negedge_0.next;
        end
    end
    assign hwif_out.intr_status.negedge_0.value = field_storage.intr_status.negedge_0.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_1
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_1.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_1.value & ~(decoded_wr_data[9:9] & decoded_wr_biten[9:9]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_1.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_1.next = next_c;
        field_combo.intr_status.negedge_1.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_1.load_next) begin
            field_storage.intr_status.negedge_1.value <= field_combo.intr_status.negedge_1.next;
        end
    end
    assign hwif_out.intr_status.negedge_1.value = field_storage.intr_status.negedge_1.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_2
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_2.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_2.value & ~(decoded_wr_data[10:10] & decoded_wr_biten[10:10]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_2.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_2.next = next_c;
        field_combo.intr_status.negedge_2.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_2.load_next) begin
            field_storage.intr_status.negedge_2.value <= field_combo.intr_status.negedge_2.next;
        end
    end
    assign hwif_out.intr_status.negedge_2.value = field_storage.intr_status.negedge_2.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_3
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_3.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_3.value & ~(decoded_wr_data[11:11] & decoded_wr_biten[11:11]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_3.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_3.next = next_c;
        field_combo.intr_status.negedge_3.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_3.load_next) begin
            field_storage.intr_status.negedge_3.value <= field_combo.intr_status.negedge_3.next;
        end
    end
    assign hwif_out.intr_status.negedge_3.value = field_storage.intr_status.negedge_3.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_4
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_4.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_4.value & ~(decoded_wr_data[12:12] & decoded_wr_biten[12:12]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_4.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_4.next = next_c;
        field_combo.intr_status.negedge_4.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_4.load_next) begin
            field_storage.intr_status.negedge_4.value <= field_combo.intr_status.negedge_4.next;
        end
    end
    assign hwif_out.intr_status.negedge_4.value = field_storage.intr_status.negedge_4.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_5
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_5.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_5.value & ~(decoded_wr_data[13:13] & decoded_wr_biten[13:13]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_5.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_5.next = next_c;
        field_combo.intr_status.negedge_5.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_5.load_next) begin
            field_storage.intr_status.negedge_5.value <= field_combo.intr_status.negedge_5.next;
        end
    end
    assign hwif_out.intr_status.negedge_5.value = field_storage.intr_status.negedge_5.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_6
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_6.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_6.value & ~(decoded_wr_data[14:14] & decoded_wr_biten[14:14]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_6.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_6.next = next_c;
        field_combo.intr_status.negedge_6.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_6.load_next) begin
            field_storage.intr_status.negedge_6.value <= field_combo.intr_status.negedge_6.next;
        end
    end
    assign hwif_out.intr_status.negedge_6.value = field_storage.intr_status.negedge_6.value;
    // Field: gpio_ctrl_csr.intr_status.negedge_7
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.intr_status.negedge_7.value;
        load_next_c = '0;
        if(decoded_reg_strb.intr_status && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.intr_status.negedge_7.value & ~(decoded_wr_data[15:15] & decoded_wr_biten[15:15]);
            load_next_c = '1;
        end else if(hwif_in.intr_status.negedge_7.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.intr_status.negedge_7.next = next_c;
        field_combo.intr_status.negedge_7.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(field_combo.intr_status.negedge_7.load_next) begin
            field_storage.intr_status.negedge_7.value <= field_combo.intr_status.negedge_7.next;
        end
    end
    assign hwif_out.intr_status.negedge_7.value = field_storage.intr_status.negedge_7.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[41];
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0 * 1 + 0][31:0] = (decoded_reg_strb.output_data[i0] && !decoded_req_is_wr) ? field_storage.output_data[i0].odata.value : '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0 * 1 + 8][31:0] = (decoded_reg_strb.output_enable[i0] && !decoded_req_is_wr) ? field_storage.output_enable[i0].oenable.value : '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0 * 1 + 16][31:0] = (decoded_reg_strb.input_data[i0] && !decoded_req_is_wr) ? hwif_in.input_data[i0].idata.next : '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0 * 1 + 24][31:0] = (decoded_reg_strb.posedge_intr_enable[i0] && !decoded_req_is_wr) ? field_storage.posedge_intr_enable[i0].intr_enable.value : '0;
    end
    for(genvar i0=0; i0<8; i0++) begin
        assign readback_array[i0 * 1 + 32][31:0] = (decoded_reg_strb.negedge_intr_enable[i0] && !decoded_req_is_wr) ? field_storage.negedge_intr_enable[i0].intr_enable.value : '0;
    end
    assign readback_array[40][0:0] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_0.value : '0;
    assign readback_array[40][1:1] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_1.value : '0;
    assign readback_array[40][2:2] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_2.value : '0;
    assign readback_array[40][3:3] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_3.value : '0;
    assign readback_array[40][4:4] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_4.value : '0;
    assign readback_array[40][5:5] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_5.value : '0;
    assign readback_array[40][6:6] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_6.value : '0;
    assign readback_array[40][7:7] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.posedge_7.value : '0;
    assign readback_array[40][8:8] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_0.value : '0;
    assign readback_array[40][9:9] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_1.value : '0;
    assign readback_array[40][10:10] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_2.value : '0;
    assign readback_array[40][11:11] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_3.value : '0;
    assign readback_array[40][12:12] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_4.value : '0;
    assign readback_array[40][13:13] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_5.value : '0;
    assign readback_array[40][14:14] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_6.value : '0;
    assign readback_array[40][15:15] = (decoded_reg_strb.intr_status && !decoded_req_is_wr) ? field_storage.intr_status.negedge_7.value : '0;
    assign readback_array[40][31:16] = '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<41; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
